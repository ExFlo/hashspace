var parser = require("./parser");
var klass= require("../klass");
var TreeWalker = require("./treeWalker").TreeWalker;
var processors = require("./processors");

var TemplateWalker=klass({
	$extends:TreeWalker,
	$constructor: function() {
		this.templates={}; // used by processors to store intermediate values in order to ease testing
		this.errors=[];
		this.resetScope();
	},

	logError:function(description) {
		this.errors.push({description:description});
	},

	resetScope:function() {
		this._scopes=[{}];
		this._scope=this._scopes[0];
	},

	addScopeVariable:function(varname) {
		this._scope[varname]=true;
	},

	rmScopeVariable:function(varname) {
		this._scope[varname]=null;
	},

	isInScope:function(varname) {
		return this._scope[varname]? true : false;
	},

	pushSubScope:function(vararray) {
		var newScope=Object.create(this._scope);
		for (var i=0,sz=vararray.length;sz>i;i++) {
			newScope[vararray[i]]=true;
		}
		this._scopes.push(newScope);
		this._scope=this._scopes[this._scopes.length-1];
	},

	popSubScope:function(varnames) {
		this._scopes.pop();
		this._scope=this._scopes[this._scopes.length-1];
	}
});


exports.compile = function (template, includeSyntaxTree) {

	// Parsing might throw an exception
	var res = parser.parse(template);
	res.code='';

	if (!res.errors || !res.errors.length) {
		// I'm sure it's an array otherwise the parser would have thrown an exception
		var w=new TemplateWalker();
		var out = w.walk(res.syntaxTree, processors);
	
		if (includeSyntaxTree===true) {
			res.codeFragments=w.templates;
		}

		var header=[
			'// ################################################################ ',
			'//  This file has been generated by the hashspace compiler          ',
			'//  Direct MODIFICATIONS WILL BE LOST when the file is recompiled!  ',
			'// ################################################################ ',
			''
		].join('\r\n');

		res.code=header+out.join('\r\n');
		res.errors=w.errors;
	}

	if (includeSyntaxTree!==true) {
		res.syntaxTree=null;
	}

	return res;
};