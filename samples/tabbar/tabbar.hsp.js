var $set=require("hsp/$set"); 
// ################################################################ 
//  This file has been generated by the hashspace compiler          
//  Direct MODIFICATIONS WILL BE LOST when the file is recompiled!  
// ################################################################ 
var klass = require("hsp/klass");

var TabCtrl = klass({
    attributes: {
        label: { type: "template" },
        body: { type: "template", defaultContent: true }
    },
    $init:function(parent) {
        if (!this.selected) {
          // as parent.$init() is called before this $init()
          // selected may be already set (to true in this case)
          $set(this, "selected", false);
        }
    }
});

var TabBarCtrl = klass({
    attributes: {
        "class": { type: "string" },
        "selection": { type: "int", defaultValue: 0, binding: "2-way" }
    },
    elements: {
        "tab": { type: "component", controller: TabCtrl }
    },
    $init: function() {
        this.select(this.selection);
    },
    select: function(idx) {
        if (this.selectedTab && idx===this.selection) {
            return;
        }
        // unselect previous tab
        if (this.selection>=0 && this.selection<this.content.length) {
            $set(this.content[this.selection], "selected", false);
        }
        // select new tab
        if (idx>=0 && idx<this.content.length) {
            $set(this, "selection", idx);
            var tab=this.content[idx];
            $set(tab, "selected", true);
            $set(this, "selectedTab", tab);
        }
    }
});


var tabbar = require("hsp/rt").template({ctl:[TabBarCtrl,"TabBarCtrl"],ref:"ctrl"}, function(n){
  var _ctrl,_tab,_tab_islast;try {_ctrl=ctrl} catch(e) {_ctrl=n.g('ctrl')};try {_tab=tab} catch(e) {_tab=n.g('tab')};try {_tab_islast=tab_islast} catch(e) {_tab_islast=n.g('tab_islast')};
  var __s = {ctrl : typeof ctrl === 'undefined' ? undefined : ctrl, tab : typeof tab === 'undefined' ? undefined : tab, tab_islast : typeof tab_islast === 'undefined' ? undefined : tab_islast};
  return [__s,n.elt("div",0,{"class":"x-tabbar"},0,[n.elt("nav",0,{"class":"x-tabs"},0,[n.$foreach({e1:[9,"ctrl.content"]},"idx","tab",0,1,[n.$if({e1:[9,"tab.selected"]},1,[n.elt("span",0,{"class":"x-tab x-tab-selected"},0,[n.cpt([null,"tab","label"],0,0,0)])],[n.elt("a",{e1:[3,2,"ctrl","select",1,2],e2:[1,1,"idx"]},{"class":"x-tab"},{"click":1},[n.cpt([null,"tab","label"],0,0,0)])]),n.$if({e1:[9,"!tab_islast"]},1,[n.$text(0,["Â   "])])]),n.$text(0,[" "])]),n.elt("div",0,{"class":"x-tab-content"},0,[n.cpt([null,"ctrl","selectedTab","body"],0,0,0)])])];
});



var test = require("hsp/rt").template([], function(n){
  var _showSubTabs,_tabbar;try {_showSubTabs=showSubTabs} catch(e) {_showSubTabs=n.g('showSubTabs')};try {_tabbar=tabbar} catch(e) {_tabbar=n.g('tabbar')};
  var __s = {showSubTabs : typeof showSubTabs === 'undefined' ? undefined : showSubTabs, tabbar : typeof tabbar === 'undefined' ? undefined : tabbar};
  return [__s,n.let({e1:[5,false],e2:[5,0],e3:[5,0]},['showSubTabs',1,'selection1',2,'selection2',3]),n.cpt([_tabbar,"tabbar"],{e1:[1,1,"selection1"]},{"selection":["",1]},0,[n.catt("tab",0,{"label":"Tab A"},0,[n.$if({e1:[9,"showSubTabs"]},1,[n.cpt([_tabbar,"tabbar"],{e1:[1,1,"selection2"]},{"selection":["",1]},0,[n.catt("tab",0,{"label":"Tab 1"},0,[n.$text(0,["Sub tab 1"])]),n.catt("tab",0,{"label":"Tab 2"},0,[n.$text(0,["Sub tab 2"])])])],[n.$text(0,["Tab A content... "])])]),n.catt("tab",0,{"label":"Tab B"},0,[n.$text(0,["Tab B content..."])]),n.catt("tab",0,{"label":"Tab C"},0,[n.$text(0,["Tab C content..."])])]),n.elt("label",0,{"for":"cb1"},0,[n.elt("input",{e1:[1,1,"showSubTabs"]},{"id":"cb1","type":"checkbox","model":["",1]},0),n.$text(0,["Show nested tabs in tab A "])])];
});


// Needed by the playground application.
// Update it, but do not remove it!
$set(module, "exports", {
    template: test
});