var $set=require("hsp/$set"); 
// ################################################################ 
//  This file has been generated by the hashspace compiler          
//  Direct MODIFICATIONS WILL BE LOST when the file is recompiled!  
// ################################################################ 
var klass=require("hsp/klass");

// simple list controller
var ListController = klass({
  attributes: {
    "class":{type:"string",binding:"1-way"},
    "onclick":{type:"callback"},
    "head":{type:"template"}
  },
  elements: {
    "option": {type:"template"},
    "separator": {type:"template"}
  }
});

// simple list template

var list = require("hsp/rt").template({ctl:[ListController,"ListController"],ref:"lc"}, function(n){
  return [n.$text(0,[" "]),n.elt("div",{e1:[1,2,"lc","class"]},{"class":["list ",1]},0,[n.$if({e1:[1,2,"lc","head"]},1,[n.elt("div",0,{"class":"head"},0,[n.cpt([null,"lc","head"],0,0,0)])]),n.$if({e1:[6,function(a0) {return !(a0);},2],e2:[1,2,"lc","content"]},1,[n.elt("span",0,{"class":"nodata"},0,[n.$text(0,["Empty list"])])],[n.elt("ul",0,{"class":""},0,[n.$foreach({e1:[1,2,"lc","content"]},"idx","itm",0,1,[n.$if({e1:[6,function(a0) {return (a0 === "@option");},2],e2:[1,2,"itm","tagName"]},1,[n.elt("li",0,{"class":"opt"},0,[n.cpt([null,"itm"],0,0,0)])],[n.$if({e1:[6,function(a0,a1,a2) {return (((a0 === "@separator") && !(a1)) && !(a2));},2,3,4],e2:[1,2,"itm","tagName"],e3:[1,1,"itm_isfirst"],e4:[1,1,"itm_islast"]},1,[n.elt("hr",0,0,0)])])]),n.$text(0,[" "])])])])];
});


// test template

var test = require("hsp/rt").template(["d"], function(n){
  var _list,_toggle,_empty,_update;try {_list=list} catch(e) {_list=n.g('list')};try {_toggle=toggle} catch(e) {_toggle=n.g('toggle')};try {_empty=empty} catch(e) {_empty=n.g('empty')};try {_update=update} catch(e) {_update=n.g('update')};
  return [n.cpt([_list,"list"],0,{"head":"Static list","class":"listcpt"},0,[n.catt("option",0,0,0,[n.$text({e1:[1,2,"d","itemName"]},["First ",1])]),n.catt("option",0,0,0,[n.$text({e1:[1,2,"d","itemName"]},["Second ",1])])]),n.$text(0,[" "]),n.cpt([_list,"list"],0,{"class":"listcpt"},0,[n.catt("head",0,0,0,[n.$text(0,["Dynamic list: "]),n.elt("a",{e1:[4,1,_toggle]},0,{"click":1},[n.$text(0,["Toggle favourite"])]),n.$text(0,[" - "]),n.elt("a",{e1:[4,1,_empty]},0,{"click":1},[n.$text(0,["Empty"])]),n.$text(0,[" - "]),n.elt("a",{e1:[4,1,_update]},0,{"click":1},[n.$text(0,["Update list"])])]),n.$if({e1:[1,2,"d","preferredOption"]},1,[n.catt("option",0,0,0,[n.$text({e1:[1,2,"d","preferredOption"]},["",1," (!)"])]),n.catt("separator",0,0,0)]),n.$foreach({e1:[1,2,"d","items"]},"idx","itm",0,1,[n.catt("option",0,0,0,[n.$text({e1:[6,function(a0) {return (a0 + 1);},2],e2:[1,1,"idx"],e3:[1,1,"itm"]},["",1,". ",3])])]),n.$text(0,[" "])])];
});


var count=0, model={
  itemName: "item",
  preferredOption:"My favourite things",
  items:["Kind of blue","Something else","Winter moon"]
};

function toggle() {
  $set(model, "preferredOption", model.preferredOption? null : "My favourite things");
}

function empty() {
  model.items.splice(0,model.items.length);
}

function update() {
  count++;
  for (var i=0;count>i;i++) {
    $set(model.items, i, "Item #"+(i+1)+" (change "+count+")");
  }
}

// Needed by the playground application.
// Update it, but do not remove it!
$set(module, "exports", {
    template: test,
    data: [model]
});