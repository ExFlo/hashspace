var $set=require("hsp/$set"); 
// ################################################################ 
//  This file has been generated by the hashspace compiler          
//  Direct MODIFICATIONS WILL BE LOST when the file is recompiled!  
// ################################################################ 
var log=require("hsp/rt/log");


var test = require("hsp/rt").template(["cities","logs"], function(n){
  var _scope,_increaseList,_decreaseList,_clearLogs,_cities,_idx,_city,_logs;try {_scope=scope} catch(e) {_scope=n.g('scope')};try {_increaseList=increaseList} catch(e) {_increaseList=n.g('increaseList')};try {_decreaseList=decreaseList} catch(e) {_decreaseList=n.g('decreaseList')};try {_clearLogs=clearLogs} catch(e) {_clearLogs=n.g('clearLogs')};try {_cities=cities} catch(e) {_cities=n.g('cities')};try {_idx=idx} catch(e) {_idx=n.g('idx')};try {_city=city} catch(e) {_city=n.g('city')};try {_logs=logs} catch(e) {_logs=n.g('logs')};
  var __s = {scope : typeof scope === 'undefined' ? undefined : scope, increaseList : typeof increaseList === 'undefined' ? undefined : increaseList, decreaseList : typeof decreaseList === 'undefined' ? undefined : decreaseList, clearLogs : typeof clearLogs === 'undefined' ? undefined : clearLogs, cities : typeof cities === 'undefined' ? undefined : cities, idx : typeof idx === 'undefined' ? undefined : idx, city : typeof city === 'undefined' ? undefined : city, logs : typeof logs === 'undefined' ? undefined : logs};
  return [__s,n.log({e1:[9,"\"top-level:\",scope"]},'inline.js','',4,3),n.elt("a",{e1:[4,1,_increaseList]},0,{"click":1},[n.$text(0,["Increase list"])]),n.$text(0,[" - "]),n.elt("a",{e1:[4,1,_decreaseList]},0,{"click":1},[n.$text(0,["Decrease list"])]),n.$text(0,[" - "]),n.elt("a",{e1:[4,1,_clearLogs]},0,{"click":1},[n.$text(0,["Clear logs"])]),n.elt("ul",0,0,0,[n.$foreach({e1:[9,"cities"]},"idx","city",0,1,[n.log({e1:[9,"\"item #\"+idx+\":\", city"]},'inline.js','',10,7),n.elt("li",0,0,0,[n.$text({e1:[6,function(a0) {return (a0 + 1);},2],e2:[1,1,"idx"],e3:[1,2,"city","name"]},["",1,". ",3])])]),n.$text(0,[" "])]),n.elt("div",0,{"class":"logsection"},0,[n.$text(0,["Logs: "]),n.elt("ul",0,{"class":"logs"},0,[n.$foreach({e1:[9,"logs"]},"msg_key","msg",0,1,[n.elt("li",0,0,0,[n.elt("span",0,{"class":"ctxt"},0,[n.$text({e1:[1,2,"msg","file"],e2:[1,2,"msg","line"],e3:[1,2,"msg","column"]},[" [",1," ",2,":",3,"] "])]),n.elt("span",0,{"class":"msg"},0,[n.$text({e1:[1,2,"msg","message"]},[" ",1," "])])])]),n.$text(0,[" "])])])];
});


// register new logger
var logs=[];
log.addLogger(function(msg) {
  logs.push(msg);
  return false; // to prevent the main logger to be notified
});

var cities=[
    {name:"Paris", code:"PAR"},
    {name:"London", code:"LON"},
    {name:"New York", code:"NYC"}
];

function increaseList() {
  var idx=cities.length+1;
  cities.push({name:"City "+idx, code:"C"+idx});
}

function decreaseList() {
  cities.shift(); // remove first item
}

function clearLogs() {
  logs.splice(0,logs.length);
}

// Needed by the playground application.
// Update it, but do not remove it!
$set(module, "exports", {
    template: test,
    data: [cities, logs]
});