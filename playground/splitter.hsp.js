var $set=require("hsp/$set"); 
// ################################################################ 
//  This file has been generated by the hashspace compiler          
//  Direct MODIFICATIONS WILL BE LOST when the file is recompiled!  
// ################################################################ 
var Class = require("hsp/klass");

var SplitterCtrl = Class({
    attributes: {
        "type": { type: "string", defaultValue: "horizontal" },
        "size": { type: "int", defaultValue: 3 },
        "onrelease": { type: "callback" }
    },

    $init: function() {
        $set(document, "onmousemove", this.onMouseMove.bind(this));
        $set(document, "onmouseup", this.onMouseUp.bind(this));
    },

    $dispose: function() {
        $set(document, "onmousevent", null);
        $set(document, "onmouseup", null);
    },

    $refresh: function() {
        if (!this.proxy) {
            $set(this, "handle", this.$getElement(0));
            $set(this, "proxy", this.$getElement(1));
        }
    },

    onMouseDown: function(event) {
        $set(this, "active", true);
        var position = this.getNewPos(event);
        this.updatePos(this.proxy, position);
        event.preventDefault();
    },

    onMouseMove: function(event) {
        if (this.active) {
            var position = this.getNewPos(event);
            this.updatePos(this.proxy, position);
            event.preventDefault();
        }
    },

    onMouseUp: function(event) {
        if (this.active) {
            var newHandlePosition = this.afterMouseUp(event);
            this.onrelease({position: newHandlePosition});
            event.preventDefault();
        }
    },

    afterMouseUp: function(event) {
        $set(this, "active", false);
        var position = this.getNewPos(event);
        this.updatePos(this.handle, position);
        return position;
    },

    getNewPos: function(event) {
        var parent = this.handle.parentNode;
        var offset;

        if (this.type == "vertical") {
            offset = parent.offsetTop;
            return Math.ceil(event.pageY - offset - (this.size / 2));
        } else {
            offset = parent.offsetLeft;
            return Math.ceil(event.pageX - offset - (this.size / 2));
        }
    },

    updatePos: function(element, position) {
        $set(element.style, this.type === "vertical" ? "top" : "left", position + "px");
    }
});



var splitter = require("hsp/rt").template({ctl:[SplitterCtrl,"SplitterCtrl"],ref:"controller"}, function(n){
  return [n.elt("div",{e1:[3,2,"controller","onMouseDown",1,2],e2:[0,1,"event"]},{"class":"splitter"},{"mousedown":1}),n.elt("div",{e1:[6,function(a0) {return ["splitter-proxy",((!(a0))? ''+"splitter-proxy-hidden":'')].join(' ');},2],e2:[1,2,"controller","active"]},{"class":["",1]},0)];
});


$set(module, "exports", splitter);